// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  
  stores Store[]
  
  @@map("companies")
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String   // ハッシュ化されたパスワード
  name      String   // 管理者名
  role      String   @default("admin") // admin, super_admin
  isActive  Boolean  @default(true)
  lastLoginAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("admins")
}

model Store {
  id                 String   @id @default(cuid())
  companyId          String
  companyName        String   // Googleフォームから直接取得
  storeName          String   // 店舗名（ストアトークン生成に使用）
  contactName        String   // 担当者名
  contactEmail       String   // 担当者メールアドレス
  notifyEmail        String?  // 通知メールアドレス（後から設定可能）
  youtubeChannelName String?  // YouTubeチャンネル名
  storeToken         String   @unique // 生のストアトークン
  storeTokenHash     String   @unique // ハッシュ化されたストアトークン
  enabled            Boolean  @default(true)
  formSubmissionId   String?  // Googleフォーム送信ID（重複チェック用）
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  company         Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  googleAccount   GoogleAccount?
  uploadJobs      UploadJob[]
  uploadStats     UploadStats[]
  
  @@map("stores")
}

model GoogleAccount {
  id                    String   @id @default(cuid())
  storeId               String   @unique
  googleEmail           String   // Googleアカウントのメールアドレス
  googleUserId          String   @unique // Google User ID
  accessTokenEnc        String   // 暗号化されたアクセストークン
  refreshTokenEnc       String   // 暗号化されたリフレッシュトークン
  tokenExpiresAt        DateTime // アクセストークンの有効期限
  scope                 String   // OAuthスコープ
  status                AccountStatus @default(PENDING) // pending, active, expired, revoked, error
  lastTokenRefresh      DateTime? // 最後にトークンを更新した日時
  errorMessage          String?  // エラーメッセージ
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
  youtubeChannels YouTubeChannel[]
  
  @@map("google_accounts")
}

model YouTubeChannel {
  id                String   @id @default(cuid())
  googleAccountId   String
  channelId         String   @unique
  channelTitle      String
  channelUrl        String?  // YouTubeチャンネルURL
  thumbnailUrl      String?  // チャンネルサムネイルURL
  subscriberCount   Int?     // 登録者数
  status            ChannelStatus @default(ACTIVE) // active, inactive, error
  lastSyncedAt      DateTime? // 最後にチャンネル情報を同期した日時
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  googleAccount GoogleAccount @relation(fields: [googleAccountId], references: [id], onDelete: Cascade)
  uploadJobs    UploadJob[]
  
  @@map("youtube_channels")
}

model UploadJob {
  id                String      @id @default(cuid())
  storeId           String
  youtubeChannelId  String?     // YouTubeチャンネルID（必須）
  serialNo          String
  title             String
  fileUri           String
  size              Int
  state             JobState    @default(QUEUED)
  error             String?
  youtubeVideoId    String?     // アップロード成功時のYouTube動画ID
  youtubeVideoUrl   String?     // YouTube動画URL
  privacyStatus     String      @default("unlisted") // public, unlisted, private
  createdAt         DateTime    @default(now())
  completedAt       DateTime?
  
  store           Store           @relation(fields: [storeId], references: [id], onDelete: Cascade)
  youtubeChannel  YouTubeChannel? @relation(fields: [youtubeChannelId], references: [id], onDelete: SetNull)
  
  @@map("upload_jobs")
}


// アップロード統計を追跡するためのテーブル
model UploadStats {
  id            String   @id @default(cuid())
  storeId       String
  date          DateTime @db.Date // 日付（日単位で集計）
  uploadCount   Int      @default(0) // アップロード回数
  successCount  Int      @default(0) // 成功回数
  failedCount   Int      @default(0) // 失敗回数
  totalSize     BigInt   @default(0) // 総ファイルサイズ（bytes）
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
  
  @@unique([storeId, date])
  @@map("upload_stats")
}

enum JobState {
  QUEUED
  UPLOADING
  PROCESSING
  DONE
  FAILED
}

enum AccountStatus {
  PENDING     // 認証待ち
  ACTIVE      // アクティブ
  EXPIRED     // トークン期限切れ
  REVOKED     // 認証取り消し
  ERROR       // エラー状態
}

enum ChannelStatus {
  ACTIVE      // アクティブ
  INACTIVE    // 非アクティブ
  ERROR       // エラー状態
}

